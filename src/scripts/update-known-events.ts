import { readFileSync, writeFileSync } from "fs";
import Table from "table-builder";
import WEBOOOKS from "@octokit/webhooks-definitions/index.json";
import { WebhookDefinition } from "@octokit/webhooks-definitions";

// update lib/webhook-names.json
const newWebhookNames = WEBOOOKS.reduce(
  (list: string[], event: WebhookDefinition) => {
    list.push(
      event.name,
      ...event.actions.map((action) => `${event.name}.${action}`)
    );
    return list;
  },
  ["*", "error"]
).sort();

writeFileSync(
  "src/webhook-names.js",
  `module.exports = ${JSON.stringify([...newWebhookNames], null, 2)}
  `
);

// update README.md
const data = WEBOOOKS.map((w: WebhookDefinition) => {
  const link = `https://developer.github.com/v3/activity/events/types/#${w.name.replace(
    /[^a-z]/g,
    ""
  )}event`;
  return {
    name: `<a href="${link}"><code>${w.name}</code></a>`,
    actions: w.actions.map((action) => `<code>${action}</code>`).join("<br>"),
  };
});
const headers = { name: "Event", actions: "Actions" };
const tableHtml = new Table().setHeaders(headers).setData(data).render();

const readme = readFileSync("README.md").toString();
const parts = readme.split(
  /<!-- \/?autogenerated via scripts\/update-known-events.js -->/
);

const newReadme =
  parts[0] +
  "<!-- autogenerated via scripts/update-known-events.js -->" +
  tableHtml +
  "<!-- /autogenerated via scripts/update-known-events.js -->" +
  parts[2];
writeFileSync("README.md", newReadme);
